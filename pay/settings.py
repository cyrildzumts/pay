"""
Django settings for pay project.

Generated by 'django-admin startproject' using Django 2.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
from django.utils.translation import ugettext_lazy as _
import logging

logger = logging.getLogger(__name__)

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

LOGIN_REDIRECT_URL = '/'
IDENTIFICATION_DOC_NAME_PREFIX = "pay_ident"

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY          =  os.environ['PAY_SECRET_KEY']

# SITE NAME SETTING
SITE_NAME           =  os.environ['PAY_SITE_NAME']

META_KEYWORDS       = "Pay, payment, buy, online-pay, africa-pay, payment solution"
META_DESCRIPTION    = "Pay Atalaku is your african solution for online payments"
VENDOR_PAYMENT_DAY = 5

ACCOUNT_ROOT_PATH = "/accounts/"
HOME_URL = "/"
DASHBOARD_ROOT_PATH = "/dashboard/"
PAYMENT_ROOT_PATH = "/payments/"
VOUCHER_ROOT_PATH = "/voucher/"
USER_PATH = "/users/detail/"
PATH_ACCEPTING_BANNER = [ACCOUNT_ROOT_PATH, HOME_URL, DASHBOARD_ROOT_PATH, PAYMENT_ROOT_PATH, VOUCHER_ROOT_PATH, USER_PATH]

# SECURITY WARNING: don't run with debug turned on in production!

CELERY_BROKER_URL   = os.environ['PAY_CELERY_BROKER_URL']
CELERY_BACKEND      = os.environ['PAY_CELERY_BACKEND']

CELERY_DEFAULT_QUEUE = "pay-default"
CELERY_DEFAULT_EXCHANGE = "pay-default"
CELERY_DEFAULT_ROUTING_KEY = "pay-default"

CELERY_OUTGOING_MAIL_QUEUE = "pay-outgoing-mails"
CELERY_OUTGOING_MAIL_EXCHANGE = "pay-mail"
CELERY_OUTGOING_MAIL_ROUTING_KEY = "pay.mail.outgoing"

CELERY_VOUCHER_GENERATE_QUEUE = "pay-voucher-generation"
CELERY_VOUCHER_EXCHANGE = "pay-voucher"
CELERY_VOUCHER_ROUTING_KEY = "pay.voucher.generate"

CELERY_IDENTIFICATION_QUEUE = "pay-ident"
CELERY_IDENTIFICATION_EXCHANGE = "pay-ident"
CELERY_IDENTIFICATION_ROUTING_KEY = "pay.identification"
CELERY_DEFAULT_EXCHANGE_TYPE = 'direct'

CELERY_NAMESPACE = 'CELERY'

ALLOWED_HOSTS = [os.getenv('PAY_ALLOWED_HOST')]
SITE_HOST = os.getenv('PAY_HOST')

#EMAIL SETTINGS
EMAIL_HOST = os.environ['PAY_EMAIL_HOST']
EMAIL_PORT = os.environ['PAY_EMAIL_PORT']
EMAIL_HOST_PASSWORD = os.environ['PAY_EMAIL_PASSWORD']
EMAIL_HOST_USER = os.environ['PAY_EMAIL_USER']
CONTACT_MAIL =  os.environ['PAY_CONTACT_MAIL']
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False
#EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
#EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_BACKEND = os.environ.get('PAY_EMAIL_BACKEND')
DEFAULT_FROM_EMAIL = os.environ.get('PAY_DEFAULT_FROM_EMAIL', 'PAY-ATALAKU <info@pay-atalaku.com>')
DJANGO_EMAIL_TEMPLATE = "tags/template_email.html"
DJANGO_EMAIL_TEMPLATE_TXT = "tags/template_email.txt"
DJANGO_WELCOME_EMAIL_TEMPLATE = "welcome_email.html"
DJANGO_VALIDATION_EMAIL_TEMPLATE = "validation_email.html"
DJANGO_PAYMENT_CONFIRMATION_EMAIL_TEMPLATE = "tags/payment_confirmation_email.html"
DJANGO_TRANSFER_CONFIRMATION_EMAIL_TEMPLATE = "tags/transfer_confirmation_email.html"
ACCOUNTS = {
    'ACCOUNT_TYPE' :  (
        ('A', 'Admin'),
        ('B', 'Business'),
        ('I', 'Individual'),
        ('M', 'Manager'), # create a group Manager instead
        ('P', 'Partner'), # create a group Partner instead
        ('S', 'Staff'), # create a group Staff instead
        ('R', 'Recharge'),
        ('X', 'PAY ACCOUNT'),
    )
}

GROUP_SELLER = 'Sellers'
GROUP_AGENT = ' Agents'
GROUP_OPERATOR = 'Operators'
GROUP_BUSINESS = 'Business'
GROUP_API_USERS = 'API-USERS'

PAY_USER = os.getenv('PAY_USER')
PAY_RECHARGE_USER = os.getenv('PAY_RECHARGE_USER')

DEFAULT_LOCAL_CURRENCY = os.getenv('PAY_CURRENCY')
CURRENCY = os.getenv('PAY_CURRENCY') 

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.humanize',
    'django.contrib.messages',
    'django.contrib.sessions',
    'django.contrib.staticfiles',
    'accounts',
    'payments.apps.PaymentsConfig',
    'rest_framework',
    'rest_framework.authtoken',
    'api.apps.ApiConfig',
    'voucher.apps.VoucherConfig',
    'dashboard.apps.DashboardConfig',
    'pay.apps.PayConfig',
    'core.apps.CoreConfig',

]

# RESTFRAMEWORK SETTINGS
REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ]
}


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'pay.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR,'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.template.context_processors.i18n',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'pay.context_processors.site_context',
                'accounts.context_processors.account_context',
                'payments.context_processors.payment_context',
                'voucher.context_processors.voucher_context'
            ],
        },
    },
]

WSGI_APPLICATION = 'pay.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    'dev': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    },
    'production': {
	'ENGINE':  os.environ['PAY_DATABASE_ENGINE'],
	'NAME'	:  os.environ['PAY_DATABASE_NAME'],
	'USER'	:  os.environ['PAY_DATABASE_USERNAME'],
	'PASSWORD':  os.environ['PAY_DATABASE_PW'],
	'HOST'	:  os.environ['PAY_DATABASE_HOST'] ,
	'PORT' 	:  os.environ['PAY_DATABASE_PORT'],
    'OPTIONS' : {
        'sslmode': 'require'
    },
    'TEST'  :{
        'NAME': os.getenv('PAY_TEST_DATABASE', 'test_pay_db'),
        'TEMPLATE' : os.getenv('PAY_TEST_DATABASE_TEMPLATE')
    },
   },

}


DEFAULT_DATABASE = os.environ.get('DJANGO_DATABASE', 'dev')
DATABASES['default'] = DATABASES[DEFAULT_DATABASE]
DEV_MODE = DEFAULT_DATABASE == 'dev'
#CSRF_COOKIE_SECURE = not DEV_MODE


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = DEV_MODE
#DEBUG = True

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# LOGGER
"""
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
        },
    },
}
"""
###############

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'console': {
            'format': '{asctime} {levelname} {module} {message}',
            'style': '{',
        },
        'file': {
            'format': '{asctime} {levelname} {module} {message}',
            'style': '{',
        },
    },

    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'console'
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'formatter': 'file',
            'filename':'logs/pay.log'
        },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler'
        }
    },
    'loggers': {
        '' : {
            'level': 'DEBUG',
            'handlers': ['console', 'file'],
            'propagate': False,
        },
        'django': {
            'level': 'WARNING',
            'handlers': ['file'],
            'propagate': True,
        },
        'django.request': {
            'handlers': ['mail_admins', 'file'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.template': {
            'handlers': ['console', 'file'],
            'level': 'WARNING',
            'propagate': False,
        }
    }
}

###############

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'fr'
LANGUAGES = (
    ('en',_('English')),
    ('fr',_('French')),
)
LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale')
]
TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'
STATIC_URL = '/static/'
#STATIC_ROOT = os.path.join(BASE_DIR, "static/")
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, "staticfiles"),
)
